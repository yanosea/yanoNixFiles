name: Auto Merge Dependency Update PR

on:
  pull_request_target:
    types: [opened, labeled, synchronize]
  workflow_run:
    workflows: ["Update Nix Flake Dependencies"]
    types: [completed]

permissions:
  contents: write
  pull-requests: write

jobs:
  find-pr:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_run' &&
      github.event.workflow_run.conclusion == 'success'
    outputs:
      pr_number: ${{ steps.find-pr.outputs.pr_number }}
      branch_name: ${{ steps.find-pr.outputs.branch_name }}
      found: ${{ steps.find-pr.outputs.found }}
    steps:
      - name: find associated PR
        id: find-pr
        run: |
          # GraphQL query to find the most recent PR
          PR_DATA=$(gh api graphql -f query='
            query($owner:String!, $repo:String!) {
              repository(owner:$owner, name:$repo) {
                pullRequests(first:1, orderBy:{field:CREATED_AT, direction:DESC}, baseRefName:"main") {
                  nodes {
                    number
                    headRefName
                    labels(first:10) {
                      nodes {
                        name
                      }
                    }
                  }
                }
              }
            }' -F owner=$GITHUB_REPOSITORY_OWNER -F repo=$(echo $GITHUB_REPOSITORY | cut -d/ -f2))

          PR_NUMBER=$(echo "$PR_DATA" | jq -r '.data.repository.pullRequests.nodes[0].number')
          HEAD_REF=$(echo "$PR_DATA" | jq -r '.data.repository.pullRequests.nodes[0].headRefName')

          # check for required labels
          HAS_DEPENDENCIES=$(echo "$PR_DATA" | jq -r 'any(.data.repository.pullRequests.nodes[0].labels.nodes[].name; . == "dependencies")')
          HAS_AUTOMATED=$(echo "$PR_DATA" | jq -r 'any(.data.repository.pullRequests.nodes[0].labels.nodes[].name; . == "automated")')
          FLAKE_UPDATE_BRANCH=$(echo "$HEAD_REF" | grep -q "^auto-update/flake-lock/" && echo "true" || echo "false")

          if [[ "$HAS_DEPENDENCIES" == "true" && "$HAS_AUTOMATED" == "true" && "$FLAKE_UPDATE_BRANCH" == "true" ]]; then
            echo "PR #$PR_NUMBER ($HEAD_REF) is a valid dependency update PR"
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "branch_name=$HEAD_REF" >> $GITHUB_OUTPUT
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "No matching PR found or PR doesn't meet requirements"
            echo "found=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  auto-approve-and-merge:
    runs-on: ubuntu-latest
    needs: find-pr
    if: needs.find-pr.outputs.found == 'true'
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: auto approve PR
        uses: hmarr/auto-approve-action@v4
        with:
          github-token: ${{ secrets.YANONIXFILES_AUTO_MERGE_PAT }}
          pull-request-number: ${{ needs.find-pr.outputs.pr_number }}

      - name: enable auto-merge and wait for completion
        run: |
          # enable auto-merge
          gh pr merge --auto --merge "$PR_NUMBER"
          echo "Auto-merge enabled for PR #$PR_NUMBER"

          # wait for merge to complete
          MAX_WAIT_TIME=300  # 5 minutes
          START_TIME=$(date +%s)

          while true; do
            CURRENT_TIME=$(date +%s)
            ELAPSED_TIME=$((CURRENT_TIME - START_TIME))

            if [ $ELAPSED_TIME -gt $MAX_WAIT_TIME ]; then
              echo "Timeout waiting for PR to merge"
              exit 0
            fi

            PR_STATE=$(gh pr view "$PR_NUMBER" --json state --jq .state)
            if [ "$PR_STATE" == "MERGED" ]; then
              echo "PR #$PR_NUMBER has been merged successfully"
              break
            fi

            echo "Waiting for PR to merge (${ELAPSED_TIME}s elapsed)..."
            sleep 5
          done
        env:
          PR_NUMBER: ${{ needs.find-pr.outputs.pr_number }}
          GITHUB_TOKEN: ${{ secrets.YANONIXFILES_AUTO_MERGE_PAT }}
