name: Auto Merge Dependency Update PR
on:
  pull_request_target:
    types: [opened, labeled, synchronize]
  workflow_run:
    workflows: ["Update Nix Flake Dependencies"]
    types: [completed]
permissions:
  contents: write
  pull-requests: write
jobs:
  find-pr:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_run' &&
      github.event.workflow_run.conclusion == 'success'
    outputs:
      pr_number: ${{ steps.find-pr.outputs.pr_number }}
      branch_name: ${{ steps.find-pr.outputs.branch_name }}
      found: ${{ steps.find-pr.outputs.found }}
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
      - name: find associated PR
        id: find-pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # alternative approach using direct PR search
          echo "Searching for dependency update PRs..."

          # get recent PRs and filter for our criteria
          PR_LIST=$(gh pr list --base main --limit 10 --json number,headRefName,labels --jq '.')
          echo "$PR_LIST" > /tmp/pr_list.json

          # extract matching PR with jq
          MATCHING_PR=$(jq -r '[.[] |
            select(.headRefName | startswith("auto-update/flake-lock/")) |
            select(.labels | map(.name) | any(. == "dependencies" or . == "automated")) |
            {number: .number, headRefName: .headRefName}] | first // {}' /tmp/pr_list.json)

          # check if we found a matching PR
          if [[ $(echo "$MATCHING_PR" | jq 'has("number")') == "true" ]]; then
            PR_NUMBER=$(echo "$MATCHING_PR" | jq -r '.number')
            HEAD_REF=$(echo "$MATCHING_PR" | jq -r '.headRefName')
            echo "PR #$PR_NUMBER ($HEAD_REF) is a valid dependency update PR"
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "branch_name=$HEAD_REF" >> $GITHUB_OUTPUT
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "No matching PR found"
            echo "found=false" >> $GITHUB_OUTPUT
          fi
  auto-approve-and-merge:
    runs-on: ubuntu-latest
    needs: find-pr
    if: needs.find-pr.outputs.found == 'true'
    env:
      PR_NUMBER: ${{ needs.find-pr.outputs.pr_number }}
      BRANCH_NAME: ${{ needs.find-pr.outputs.branch_name }}
      GITHUB_TOKEN: ${{ secrets.YANONIXFILES_AUTO_MERGE_PAT }}
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
      - name: auto approve PR
        uses: hmarr/auto-approve-action@v4
        with:
          github-token: ${{ secrets.YANONIXFILES_AUTO_MERGE_PAT }}
          pull-request-number: ${{ needs.find-pr.outputs.pr_number }}
      - name: enable auto-merge and wait for completion
        run: |
          gh pr merge --auto --merge "$PR_NUMBER"
          while true; do
            PR_STATE=$(gh pr view "$PR_NUMBER" --json state --jq .state)
            if [ "$PR_STATE" == "MERGED" ]; then
              break
            fi
            sleep 5
          done
      - name: delete source branch if it exists
        run: |
          git push origin --delete "$BRANCH_NAME"
