" vim options {{{
" define encoding
set encoding=utf-8
set fileencoding=utf-8
scriptencoding utf-8
" set help language
set helplang=ja
" disable backup file
set nobackup
" disable swap file
set noswapfile
" show line number
set number
" highlight current line
set cursorline
" show cursor position
set ruler
" always show sign coolumn
set signcolumn=yes
" invisible characters
set list
set listchars=tab:▸\ ,trail:⋅,nbsp:␣,extends:❯,precedes:❮
" always show status line
set laststatus=3
" disable wrapping
set nowrap
" gui setting
set guifont=PlemolJP\ Console\ NF
set guifontwide=PlemolJP\ Console\ NF
set termguicolors
set mouse=
set guicursor+=i:block,a:-blinkwait175-blinkoff150-blinkon175
" search
set hlsearch
set noignorecase
set smartcase
set incsearch
set nowrapscan
" how many lines of command history to keep
set history=1000
" complement
set wildmenu
set completeopt=menuone,noinsert
" indent
set autoindent
set smartindent
set expandtab
set tabstop=2
set shiftwidth=2
" window split
set splitbelow
set splitright
" enable syntax highlighting
syntax enable
" enable system clipboard
set clipboard+=unnamedplus
" disable line move with h and l
set whichwrap-=h
set whichwrap-=l
" display
set display=lastline
" persist undo
let vim_dir = expand('$HOME/.vim')
let undo_dir = vim_dir . '/undo'
if !isdirectory(undo_dir)
	call mkdir(undo_dir, 'p')
endif
set undofile
exe 'set undodir=' .. undo_dir
" viminfo
set viminfo+=n$HOME/.vim/viminfo
" standard plugin
filetype plugin on
let g:netrw_liststyle=1
let g:netrw_banner=0
let g:netrw_sizestyle="H"
let g:netrw_timefmt="%Y/%m/%d %H:%M:%S"
let g:netrw_preview=1
" }}}
" keymaps {{{
" hide highlight search
nnoremap <silent> <ESC> :nohlsearch<CR>
" leader
let g:mapleader = ' '
let g:maplocalleader = '\\'
" move line up and down
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k
" tab navigation
nnoremap <LEADER>tb :tabprevious<CR>
nnoremap <LEADER>tn :tabnext<CR>
nnoremap <LEADER>tN :tabnew<CR>
nnoremap <LEADER>tc :tabclose<CR>
" buffer navigation
nnoremap <LEADER>bb :bprevious<CR>
nnoremap <LEADER>bn :bnext<CR>
nnoremap <LEADER>bN :enew<CR>
nnoremap <LEADER>bc :bd<CR>
" paste without affecting clipboard
vnoremap <C-p> \"0p<CR>
" wsl
if !empty($WSL_DISTRO_NAME)
  " clipboard sharing
  if executable('win32yank.exe')
    augroup WSLYank
      autocmd!
      autocmd TextYankPost * :call system('win32yank.exe -i', @")
    augroup END
    autocmd VimEnter * nnoremap <silent> p :call setreg('"',system('win32yank.exe -o'))<CR>""p
  endif
endif
" plugins
call plug#begin()
  " checkhealth
  Plug 'rhysd/vim-healthcheck'
  " colorscheme
  Plug 'sainnhe/everforest'
  " copilot
  Plug 'github/copilot.vim'
  " denops (fuzzy-motion, denops-translate, skkeleton dependency)
  Plug 'vim-denops/denops.vim'
  " fuzzy-motion
  Plug 'yuki-yano/fuzzy-motion.vim'
  Plug 'lambdalisue/kensaku.vim'
  " skkeleton
  Plug 'vim-skk/skkeleton'
  " translate
  Plug 'skanehira/denops-translate.vim'
call plug#end()
" colorscheme settings
let g:everforest_background = 'hard'
let g:everforest_better_performance = 1
let g:everforest_enable_italic = 1
let g:everforest_diagnostic_text_highlight = 1
let g:everforest_diagnostic_line_highlight = 1
let g:everforest_diagnostic_virtual_text = 'colored'
colorscheme everforest
" copilot
let g:copilot_no_tab_map = 1
inoremap <silent><expr> <C-a><C-a> copilot#Accept("\<CR>")
" fuzzy-motion
nnoremap <silent> <LEADER><SPACE> :FuzzyMotion<CR>
let g:fuzzy_motion_matchers = ['fzf', 'kensaku']
" skkeleton
inoremap <C-j> <Plug>(skkeleton-toggle)
cnoremap <C-j> <Plug>(skkeleton-toggle)
let g:skkeleton_dictionaries = []
for file in split(glob('$XDG_DATA_HOME/skk/*'), '\n')
  call add(g:skkeleton_dictionaries, file)
endfor
function! SkkeletonConfig()
  call skkeleton#config({
  \ 'eggLikeNewline': v:true,
  \ 'globalDictionaries': g:skkeleton_dictionaries,
  \ 'immediatelyCancel': v:false,
  \ 'registerConvertResult': v:true,
  \ 'showCandidatesCount': 1,
  \ 'sources': ['skk_dictionary', 'google_japanese_input'],
  \ 'userDictionary': $XDG_STATE_HOME.'/skk/.skkeleton',
  \ })
  call skkeleton#register_keymap('henkan', '<Esc>', 'cancel')
endfunction
autocmd User skkeleton-initialize-pre call SkkeletonConfig()
" }}}
